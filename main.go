package main

import (
	"bytes"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"log"
	"time"

	"github.com/pkg/errors"
	"github.com/snowplow/snowplow-golang-analytics-sdk/analytics"
)

// A Base64 Encoded TSV Snowplow Payload, which includes JSON in some columns
// We'll use Snowplow Analytics SDK to parse the parts we want.
// We are interested in the derived contexts ... see below
const data = ""

// Decodes and parses base64 encoded TSV event
func parseBase64EncodedEvent(event string) (analytics.ParsedEvent, error) {
	tsv, err := DecodeBase64Payload(event)
	if err != nil {
		return nil, errors.Wrap(err, "failed decode base64 data")
	}

	parsed, err := analytics.ParseEvent(tsv)
	if err != nil {
		return nil, errors.Wrap(err, "failed parse TSV event")
	}

	return parsed, nil
}

func main() {
	start := time.Now()

	parsed, err := parseBase64EncodedEvent(data)
	if err != nil {
		log.Fatal(err)
	}

	jsonData, err := parsed.ToJson()
	if err != nil {
		log.Fatal("failed parse TSV to json:", err)
	}

	log.Println("#################################")
	elapsed := time.Since(start)

	fmt.Println(prettyJson(jsonData))

	log.Printf("#### Function took %s ####\n", elapsed)
	log.Println("#################################")
}

// Decodes the Base64 Encoded Payload
func DecodeBase64Payload(payload string) (string, error) {
	sDec, err := base64.StdEncoding.DecodeString(payload)
	if err != nil {
		log.Fatalf("Failed to decode Base64 %v", err)
	}
	return string(sDec), err
}

// Formats JSON string
func prettyJson(jsonData []byte) string {
	var prettyJSON bytes.Buffer
	err := json.Indent(&prettyJSON, jsonData, "", "  ")
	if err != nil {
		log.Fatal("JSON parse error: ", err)
	}

	return string(prettyJSON.Bytes())
}
